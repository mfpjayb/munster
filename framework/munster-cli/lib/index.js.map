{"mappings":";;;;;;;;;;;;;;;;;;;;ACAA,yBAAc,GAAG,IAAI,CAAC,KAAK,CAAC,CAA8gB;;;;;;SEI1hB,yCAAY,CAAC,YAAoB,EAAE,CAAC;IAChD,KAAK,CAAC,UAAU,GAAG,cAAM,CAAC,OAAO,CAAC,GAAG;IACrC,KAAK,CAAC,WAAW,GAAG,mBAAO,CAAC,UAAU,EAAE,CAAkB;IAC1D,EAAE,GAAG,oBAAU,CAAC,WAAW,GACvB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAG,CAAC,YAAY;IAEvC,MAAM,CAAC,OAAO,CAAC,WAAW;AAC9B,CAAC;;;;;;SGXe,yCAAY,CAAC,GAAW,EAAU,CAAC;IAC/C,MAAM,CAAC,GAAG,CAAC,OAAO,SAAQ,CAAC,GAAE,CAAC,CAAC,WAAW,GAAG,CAAC;;AAClD,CAAC;;;SDKe,yCAAsB,CAAC,IAAY,EAAE,CAAC;IAClD,KAAK,CAAC,SAAS,GAAG,yCAAY,EAAE,CAAC,EAAE,IAAI;IACvC,MAAM,EAAE,2EAGO,EAAE,IAAI,CAAC,kBAEb,EAAE,SAAS,CAAC,qDAGN,EAAE,SAAS,CAAC,mCAI3B;AACJ,CAAC;;;;;;;;;;;;;;;SEtBe,yCAAW,CAAC,QAAgB,EAAU,CAAC;IACnD,KAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAG;IAClC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC;AACrC,CAAC;;;SHGe,yCAA2B,CAAC,QAAgB,EAAE,SAAc,EAAE,CAAC;IAC3E,KAAK,CAAC,UAAU,GAAG,cAAM,CAAC,OAAO,CAAC,GAAG;IACrC,KAAK,CAAC,QAAQ,GAAG,yCAAW,CAAC,QAAQ;IACrC,KAAK,CAAC,aAAa,GAAG,yCAAsB,CAAC,QAAQ;IACrD,KAAK,CAAC,kBAAkB,GAAG,gBAAI,CAAC,SAAS,CAAC,MAAM,KAAK,QAAQ,CAAC,cAAc;IAC5E,KAAK,CAAC,uBAAuB,GAAG,mBAAO,CAAC,UAAU,EAAE,kBAAkB;IACtE,KAAK,CAAC,yBAAyB,GAAG,mBAAO,CAAC,uBAAuB;IAEjE,EAEG,AAFH,kGAEG,AAFH,EAEG,CACH,EAAE,EAAE,0DAAU,CAAC,uBAAuB,GAClC,OAAO,CAAC,GAAG,CAAC,0DAAG,EAAE,SAAS,EAAE,kBAAkB,CAAC,2CAA2C;SACvF,CAAC;QACJ,6CAAmC,EAAE,CAAC;YAAC,SAAS,EAAE,IAAI;QAAC,CAAC;QACxD,0DAAS,CAAC,uBAAuB,EAAE,aAAa,EAAE,QAAQ,CAAC,KAAK,EAAE,CAAC;YAC/D,EAAE,EAAE,KAAK,EACL,OAAO,CAAC,GAAG,CAAC,0DAAG,EAAE,0BAA0B;YAE/C,OAAO,CAAC,GAAG,CAAC,mBAAK,CAAC,CAAQ,UAAG,kBAAkB;QACnD,CAAC;IACL,CAAC;AACL,CAAC;;;;;SFrBe,yCAAe,CAAC,IAAY,EAAE,QAAgB,EAAE,CAAC;IAC7D,KAAK,CAAC,SAAS,GAAG,yCAAY,EAAE,iEAAiE;IACjG,MAAM,CAAC,IAAI;QACP,IAAI,CAAC,CAAW;YACZ,yCAA2B,CAAC,QAAQ,EAAE,SAAS;YAC/C,KAAK;;AAGjB,CAAC;;;AFTD,wBAAO,CAAC,OAAO,CAAC,gEAAI,CAAC,OAAO,EAAE,WAAW,CAAC,CAAgB;AAE1D,wBAAO,CACF,OAAO,CAAC,CAA4B,6BACpC,WAAW,CAAC,CAA2B,4BACvC,MAAM,CAAC,yCAAe;AAE3B,wBAAO,CAAC,KAAK,CAAC,cAAM,CAAC,OAAO,CAAC,IAAI,EAEjC,CAAqB,AAArB,EAAqB,AAArB,mBAAqB;AAErB,CAAmB,AAAnB,EAAmB,AAAnB,iBAAmB","sources":["src/index.ts","package.json","src/commands/generate/index.ts","src/get-app-config.ts","src/commands/generate/component/run-generate-component-command.ts","src/commands/generate/component/component-text-generator.ts","src/utils/kebab-to-camel.ts","src/commands/generate/component/get-filename.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { program } from 'commander';\r\nimport json from '../package.json';\r\nimport { generateCommand } from './commands/generate';\r\n\r\nprogram.version(json.version).description('Munster JS CLI');\r\n\r\nprogram\r\n    .command('generate <type> <filename>')\r\n    .description('Generate a munster files.')\r\n    .action(generateCommand);\r\n\r\nprogram.parse(global.process.argv);\r\n\r\n// generate component\r\n\r\n// generate service","{\r\n  \"name\": \"@munster/cli\",\r\n  \"version\": \"0.0.0\",\r\n  \"description\": \"\",\r\n  \"main\": \"./lib/index.js\",\r\n  \"preferGlobal\": true,\r\n  \"bin\": {\r\n    \"mc\": \"./lib/index.js\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"parcel build ./src/index.ts && node ./shebang-script.js\"\r\n  },\r\n  \"keywords\": [],\r\n  \"author\": \"\",\r\n  \"license\": \"ISC\",\r\n  \"dependencies\": {\r\n    \"chalk\": \"^4.1.2\",\r\n    \"commander\": \"^8.2.0\",\r\n    \"fs\": \"^0.0.1-security\",\r\n    \"parcel-plugin-shebang\": \"^1.3.3\",\r\n    \"path\": \"^0.12.7\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"parcel\": \"^2.0.0-nightly.873\",\r\n    \"typescript\": \"^4.4.3\"\r\n  }\r\n}\r\n","import { getAppConfig } from \"../../get-app-config\";\r\nimport { runGenerateComponentCommand } from \"./component/run-generate-component-command\";\r\n\r\n/**\r\n * Generate commands\r\n */\r\n\r\nexport function generateCommand(type: string, filename: string) {\r\n    const appConfig = getAppConfig(`Generate command must be run in munster project's root directory.`);\r\n    switch(type) {\r\n        case 'component': {\r\n            runGenerateComponentCommand(filename, appConfig);\r\n            break;\r\n        }\r\n    }\r\n}\r\n","import { resolve } from 'path';\r\nimport { existsSync } from 'fs';\r\nimport { red } from 'chalk';\r\n\r\nexport function getAppConfig(errorMessage: string) {\r\n    const currentDir = global.process.cwd();\r\n    const appJsonPath = resolve(currentDir, 'munster-app.json');\r\n    if (!existsSync(appJsonPath)) {\r\n        return console.log(red(errorMessage));\r\n    }\r\n    return require(appJsonPath);\r\n}\r\n","import { red, green } from \"chalk\";\r\nimport { existsSync, mkdirSync, writeFile } from 'fs';\r\nimport { join, resolve, dirname } from 'path';\r\nimport { componentTextGenerator } from \"./component-text-generator\";\r\nimport { getFilename } from \"./get-filename\";\r\n\r\nexport function runGenerateComponentCommand(filepath: string, appConfig: any) {\r\n    const currentDir = global.process.cwd();\r\n    const filename = getFilename(filepath);\r\n    const componentText = componentTextGenerator(filename);\r\n    const appFileDistination = join(appConfig.appDir, `${filepath}.component.tsx`);\r\n    const completeFileDistination = resolve(currentDir, appFileDistination);\r\n    const completeFolderDistination = dirname(completeFileDistination);\r\n\r\n    /**\r\n     * Check if filename already exists, if yes don't create the file and throw an error\r\n     */\r\n    if (existsSync(completeFileDistination)) {\r\n        console.log(red(`The file ${appFileDistination} already exists. Component creation failed.`));\r\n    } else {\r\n        mkdirSync(completeFolderDistination, { recursive: true });\r\n        writeFile(completeFileDistination, componentText, function(error) {\r\n            if (error) {\r\n                console.log(red(`Creating component failed.`));\r\n            }\r\n            console.log(green('CREATE'), appFileDistination);\r\n        });\r\n    }\r\n}\r\n","import { kebabToCamel } from \"../../../utils/kebab-to-camel\";\r\n\r\n/**\r\n * \r\n * @param string the name of the file generated. ex. format \"login-form\"\r\n * @returns the string to be writtedn to the new generated component file\r\n */\r\nexport function componentTextGenerator(name: string) {\r\n    const className = kebabToCamel(`-${name}`);\r\n    return `import { Component } from \"munster-core\";\r\n\r\n@Component({\r\n    selector: 'app-${name}'\r\n})\r\nexport class ${className}Component {\r\n\r\n    $render(): any {\r\n        return <h1>${className}Component Works!</h1>\r\n    }\r\n\r\n}\r\n    `;\r\n}\r\n","export function kebabToCamel(str: string): string {\r\n    return str.replace(/-./g, x=>x.toUpperCase()[1]);\r\n}\r\n","export function getFilename(filepath: string): string {\r\n    const pathArr = filepath.split('/');\r\n    return pathArr[pathArr.length - 1];\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}